"""
Tiny persistence layer for ResearchReport → SQLite, based on SQLModel.
Usage:
    from gtmind.persistence import save_report

    save_report(report, db_path="my.db")
"""

from __future__ import annotations

import json
from pathlib import Path
from typing import Annotated

from sqlmodel import Field, Session, SQLModel, create_engine, select

from gtmind.core.models import ResearchReport


# ---------- ORM ----------------------------------------------------------- #
class ReportRow(SQLModel, table=True):  # singular row = one ResearchReport
    id: Annotated[int | None, Field(primary_key=True)] = None
    query: str
    report_json: str  # ✅ renamed

# ---------- public API ---------------------------------------------------- #
_engine_cache: dict[str, any] = {}


def _engine(db_path: str):
    if db_path not in _engine_cache:
        engine = create_engine(f"sqlite:///{db_path}", echo=False)
        SQLModel.metadata.create_all(engine)
        _engine_cache[db_path] = engine
    return _engine_cache[db_path]


def save_report(report: ResearchReport, db_path: str | Path = "my.db") -> int:
    """
    Persist report → SQLite file.  
    Returns autogenerated row id.
    """
    db_path = str(db_path)
    with Session(_engine(db_path)) as sess:
        row = ReportRow(query=report.query, report_json=json.dumps(report.model_dump()))
        sess.add(row)
        sess.commit()
        sess.refresh(row)
        return row.id  # type: ignore[return-value]

def list_saved_reports(db_path: str | Path) -> list[ReportRow]:
    db_path = str(db_path)
    engine = _engine(db_path)
    with Session(engine) as sess:
        return sess.exec(select(ReportRow).order_by(ReportRow.id.desc())).all()